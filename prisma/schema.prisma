// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  nickname  String   @unique @map("nickname")
  password  String   @map("password")

  Posts     Posts[] // 사용자(Users) 테이블과 게시글(Posts) 테이블이 1:N 관계를 맺습니다.
  Comments  Comments[] // 사용자(Users) 테이블과 댓글(Comments) 테이블이 1:N 관계를 맺습니다.
  Likes     Likes[]

  @@map("Users")
}

model Posts {
  postId    Int      @id @default(autoincrement()) @map("postId")
  UserId    Int      @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키
  title     String   @map("title")
  content   String   @map("content") @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Users 테이블과 관계를 설정합니다.
  User     Users      @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Comments Comments[] // 게시글(Posts) 테이블과 댓글(Comments) 테이블이 1:N 관계를 맺습니다.
  Likes    Likes[]

  @@map("Posts")
}

model Comments {
  commentId Int      @id @default(autoincrement()) @map("commentId")
  PostId    Int      @map("PostId") // 게시글(Posts) 테이블을 참조하는 외래키
  UserId    Int      @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키
  comment   String   @map("comment")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Post Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  @@map("Comments")
}

model Likes {
  likeId    Int      @id @default(autoincrement()) @map("commentId")
  PostId    Int      @map("PostId") // 게시글(Posts) 테이블을 참조하는 외래키
  UserId    Int      @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Post Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("Likes")
}
